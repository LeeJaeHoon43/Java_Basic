public class Oper{
	public static void main(String[] ar){
		/*
		# 연산자의 우선순위.
		1. 최우선 연산자 : . [] ()
		2. 단항 연산자 : ! ~ + - ++ -- (cast)
		3. 산술 연산자 : + - * / %
		4. 시프트 연산자 : << >> >>>
		5. 관계 연산자 : > < >= <= == !=
		6. 비트 연산자 : & | ^
		7. 논리 연산자 : && || 
		8. 조건(삼항) 연산자 : 조건? 항1(true일때):항2(false일때)
		9. 배정 대입 연산자 : *= /= %= += -= <<= >>= >>>= &= != ^= =
		10. 후위형 증감 연산자 : ++ -- 
		11. 순차 연산자 : ,

		1. 최우선 연산자 
		.(period)연산자 : 접근 연산자 : 특정 범위 내에 속해 있는 멤버를 지칭할 때 사용.
		2. [] 대괄호 연산자
		- 배열 참조 연산자
		- 자료형이나 클래스와 함께 사용되어 해당 변수나 객체가 배열로 선언됨을 알리는 역할.
		3. () 괄호 연산자
		- 특정 연산자들을 묶어서 먼저 처리할 수 있도록 만들어주는 연산자.
		4. 단항 연산자
		! (논리부정)연산자 : 논리 자료형의 데이터 값을 부정하는 연산자. true->false, false->true
		~ (비트부정)연산자 : 비트 값으로 존재하는 모든 자료들에 대해 부정의 값을 취할 수 있는 연산자.
						  단, boolean, char, short, int형은 ~연산 결과 후 int, long형에만 담을 수 있다.
						  long형은 ~연산 후 long형에만 담을 수 있다.
		+ / - (양수/음수 판별) 연산자 : 양수, 음수를 판별해주는 연산자 (+ 생략가능)
		++ -- (전위형 증감 연산자) : 특정 변수의 값을 하나 증가시키거나 하나 감소시키는 연산자, 후위 연산자와 우선순위의 차이가 존재함.
		5. 산술 연산자 (+, -, *, /, %)
		- byte, short, char, int 자료형 사이의 연산에서는 결과가 int이다.
		- long, float, double 자료형이 연산되면 큰 자료형으로 결과가 결정된다.
		- /는 몫을, %는 나머지값을 구해준다.

		6. 시프트 연산자 
		- 대상 변수의 값을 2진 비트로 바꾼 후, 특정 비트 수만큼 이동시켜 원하는 부분의 비트 데이터를 얻어 내는 연산자.

		7. <<(left shift) 연산자
		- 대상 변수 값을 2진 비트로 바꾼 후 왼쪽으로 특정 비트 수만큼 이동
		- 빈자리는 0값으로 채운다.

		8. >>(right shift) 연산자
		- 대상 변수 값을 2진 비트로 바꾼 후 오른쪽으로 특정 비트 수만큼 이동
		- 빈자리는 0값으로 채운다.

		9. >>>(unsigned right shift)연산자
		- >>와 기본적으로 같으나, 원본데이터가 음수일 경우에도 빈 비트를 0으로 채운다.

		10. 관계 연산자
		<, >, <=, >=는 비교 관계 연산자
		==, !=는 항등 관계 연산자

		11. 논리 연산자
		&& (AND), || (OR) : 앞의 것만으로도 판단 가능이면 판단한다.
		short circuit : &&일 경우, false 출력, ||일 경우 true출력, 고로 실행속도가 빠르다.
		&, | 사용 다 실행 후 결과 출력 실행 속도가 빠르다.

		12. 삼항 연산자
		조건항 ? 항1(true일 때) : 항2(false일 때)
		*/
	}
}






